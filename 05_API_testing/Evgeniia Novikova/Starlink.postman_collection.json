{
	"info": {
		"_postman_id": "d8ff9f93-9cae-4f14-8cc0-a4e958e893ac",
		"name": "Starlink",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40938723"
	},
	"item": [
		{
			"name": "PositiveTests",
			"item": [
				{
					"name": "Get all Starlink sats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Saving 1743 id and version to environmet to use in (GET-one Starlink)\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let selectedId = jsonData[1743].id;\r",
									"pm.environment.set(\"id\", selectedId);\r",
									"let selectedVersion = jsonData[1743].version;\r",
									"pm.environment.set(\"version\", selectedVersion);\r",
									"\r",
									"pm.test(\"ID and version remain unchanged\", function () {\r",
									"    pm.expect(jsonData[1743].id).to.equal(pm.environment.get(\"id\"));\r",
									"    pm.expect(jsonData[1743].version).to.equal(pm.environment.get(\"version\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 600ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 4603943 B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(4603943);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be okay to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"// Creating a list of all \"id\"\r",
									"const response = pm.response.json();\r",
									"const Valid_id = response.map(item => item.id);\r",
									"pm.environment.set(\"id_list\",Valid_id)\r",
									"\r",
									"\r",
									"//Making a random \"id\"\r",
									"const randomid = Valid_id[Math.floor(Math.random() * Valid_id.length)];\r",
									"\r",
									"//Setting id in environment to radom id \r",
									"pm.environment.set(\"Random_id\",randomid);\r",
									"\r",
									"// Making Wrong id by adding \"z\" at the end of random id\r",
									"const Wrong_id = randomid +\"z\"\r",
									"pm.environment.set(\"NotExisting_id\",Wrong_id );\r",
									"\r",
									"// Cheking response time\r",
									"pm.test(\"Response time is less than 1700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1700);\r",
									"});\r",
									"\r",
									"// Checking response size\r",
									"pm.test(\"Response size is less than 7 000 000 B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(7000000);\r",
									"});\r",
									"\r",
									"\r",
									"//               Body\r",
									"//Check that each oject in the array contains \"spaceTrack\"\r",
									"pm.test(\"Each object in the array contains 'spaceTrack'\", function () {\r",
									"    let jsonData = pm.response.json();    \r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    jsonData.forEach(item => {\r",
									"        pm.expect(item).to.have.property(\"spaceTrack\");\r",
									"    });\r",
									"}); \r",
									"\r",
									"\r",
									"// Each object in the array contains 'launch' as a string or null\r",
									"pm.test(\"Each object in the array contains 'launch' as a string or null\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array'); // Check that response is array\r",
									"    jsonData.forEach(item => {\r",
									"        pm.expect(item).to.have.property(\"launch\"); // Check 'launch' key\r",
									"        pm.expect(item.launch).to.satisfy(value => value === null || typeof value === 'string', \r",
									"            \"Expected 'launch' to be either null or a string\");  // Check that launch item is string or null\r",
									"    });\r",
									"})\r",
									"\r",
									"// Each object in the array contains 'version' as a string or null\r",
									"pm.test(\"Each object in the array contains 'version' as a string or null\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array'); // Check that response is array\r",
									"    jsonData.forEach(item => {\r",
									"        pm.expect(item).to.have.property(\"version\"); // \r",
									"        pm.expect(item.version).to.satisfy(value => value === null || typeof value === 'string', \r",
									"            \"Expected 'version' to be either null or a string\");  \r",
									"    });\r",
									"})\r",
									"\r",
									"// Each object in the array contains 'height_km' as a string or null\r",
									"pm.test(\"Each object in the array contains 'height_km' as a number or null\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array'); // Check that response is array\r",
									"    jsonData.forEach(item => {\r",
									"        pm.expect(item).to.have.property(\"height_km\"); \r",
									"        pm.expect(item.height_km).to.satisfy(value => value === null || typeof value === 'number', \r",
									"            \"Expected 'height_km' to be either null or a number\");  \r",
									"    });\r",
									"})\r",
									"\r",
									"// Each object in the array contains 'latitude' as a string or null\r",
									"pm.test(\"Each object in the array contains 'latitude' as a number or null\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array'); // Check that response is array\r",
									"    jsonData.forEach(item => {\r",
									"        pm.expect(item).to.have.property(\"latitude\"); \r",
									"        pm.expect(item.latitude).to.satisfy(value => value === null || typeof value === 'number', \r",
									"            \"Expected 'latitude' to be either null or a number\");  \r",
									"    });\r",
									"})\r",
									"\r",
									"// Each object in the array contains 'longitude' as a string or null\r",
									"pm.test(\"Each object in the array contains 'longitude' as a number or null\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array'); // Check that response is array\r",
									"    jsonData.forEach(item => {\r",
									"        pm.expect(item).to.have.property(\"longitude\"); \r",
									"        pm.expect(item.longitude).to.satisfy(value => value === null || typeof value === 'number', \r",
									"            \"Expected 'longitude' to be either null or a number\");  \r",
									"    });\r",
									"})\r",
									"\r",
									"// Each object in the array contains 'velocity_kms' as a string or null\r",
									"pm.test(\"Each object in the array contains 'velocity_kms' as a number or null\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array'); // Check that response is array\r",
									"    jsonData.forEach(item => {\r",
									"        pm.expect(item).to.have.property(\"velocity_kms\"); \r",
									"        pm.expect(item.velocity_kms).to.satisfy(value => value === null || typeof value === 'number', \r",
									"            \"Expected 'velocity_kms' to be either null or a number\");  \r",
									"    });\r",
									"})\r",
									"\r",
									"//Each object in the array contains 'id' as a string\r",
									"pm.test(\"Each object in the array contains 'id' as a string\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    jsonData.forEach(item => {\r",
									"        pm.expect(item).to.have.property(\"id\");\r",
									"        pm.expect(item.id).to.be.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"//Check specific index\r",
									"let targetObject = jsonData[1743];\r",
									"\r",
									"pm.test(\"CCSDS_OMM_VERS is 2.0\", function () {\r",
									"    pm.expect(targetObject.spaceTrack.CCSDS_OMM_VERS).to.equal(\"2.0\");\r",
									"});\r",
									"\r",
									"pm.test(\"COMMENT has expected value\", function () {\r",
									"    pm.expect(targetObject.spaceTrack.COMMENT).to.equal(\"GENERATED VIA SPACE-TRACK.ORG API\");\r",
									"});\r",
									"\r",
									"pm.test(\"CREATION_DATE is correct\", function () {\r",
									"    pm.expect(targetObject.spaceTrack.CREATION_DATE).to.equal(\"2022-11-30T17:18:05\");\r",
									"});\r",
									"\r",
									"pm.test(\"OBJECT_NAME is correct\", function () {\r",
									"    pm.expect(targetObject.spaceTrack.OBJECT_NAME).to.equal(\"STARLINK-3085\");\r",
									"});\r",
									"\r",
									"pm.test(\"OBJECT_ID is correct\", function () {\r",
									"    pm.expect(targetObject.spaceTrack.OBJECT_ID).to.equal(\"2021-082AC\");\r",
									"});\r",
									"\r",
									"pm.test(\"EPOCH has expected value\", function () {\r",
									"    pm.expect(targetObject.spaceTrack.EPOCH).to.equal(\"2022-11-30T09:44:51.693504\");\r",
									"});\r",
									"\r",
									"pm.test(\"MEAN_MOTION has expected value\", function () {\r",
									"    pm.expect(targetObject.spaceTrack.MEAN_MOTION).to.equal(14.98326548);\r",
									"});\r",
									"\r",
									"pm.test(\"ECCENTRICITY has expected value\", function () {\r",
									"    pm.expect(targetObject.spaceTrack.ECCENTRICITY).to.equal(0.0003239);\r",
									"});\r",
									"\r",
									"pm.test(\"INCLINATION has expected value\", function () {\r",
									"    pm.expect(targetObject.spaceTrack.INCLINATION).to.equal(70.0015);\r",
									"});\r",
									"\r",
									"pm.test(\"RA_OF_ASC_NODE has expected value\", function () {\r",
									"    pm.expect(targetObject.spaceTrack.RA_OF_ASC_NODE).to.equal(28.1842);\r",
									"});\r",
									"\r",
									"pm.test(\"ARG_OF_PERICENTER has expected value\", function () {\r",
									"    pm.expect(targetObject.spaceTrack.ARG_OF_PERICENTER).to.equal(276.8404);\r",
									"});\r",
									"\r",
									"pm.test(\"MEAN_ANOMALY has expected value\", function () {\r",
									"    pm.expect(targetObject.spaceTrack.MEAN_ANOMALY).to.equal(83.2387);\r",
									"});\r",
									"\r",
									"pm.test(\"REV_AT_EPOCH has expected value\", function () {\r",
									"    pm.expect(targetObject.spaceTrack.REV_AT_EPOCH).to.equal(6900);\r",
									"});\r",
									"\r",
									"pm.test(\"BSTAR has expected value\", function () {\r",
									"    pm.expect(targetObject.spaceTrack.BSTAR).to.equal(0.000046667);\r",
									"});\r",
									"\r",
									"pm.test(\"MEAN_MOTION_DOT has expected value\", function () {\r",
									"    pm.expect(targetObject.spaceTrack.MEAN_MOTION_DOT).to.equal(0.00000464);\r",
									"});\r",
									"\r",
									"pm.test(\"MEAN_MOTION_DDOT is 0\", function () {\r",
									"    pm.expect(targetObject.spaceTrack.MEAN_MOTION_DDOT).to.equal(0);\r",
									"});\r",
									"\r",
									"pm.test(\"SEMIMAJOR_AXIS has expected value\", function () {\r",
									"    pm.expect(targetObject.spaceTrack.SEMIMAJOR_AXIS).to.equal(6950.204);\r",
									"});\r",
									"\r",
									"pm.test(\"PERIOD has expected value\", function () {\r",
									"    pm.expect(targetObject.spaceTrack.PERIOD).to.equal(96.107);\r",
									"});\r",
									"\r",
									"pm.test(\"APOAPSIS has expected value\", function () {\r",
									"    pm.expect(targetObject.spaceTrack.APOAPSIS).to.equal(574.32);\r",
									"});\r",
									"\r",
									"pm.test(\"PERIAPSIS has expected value\", function () {\r",
									"    pm.expect(targetObject.spaceTrack.PERIAPSIS).to.equal(569.817);\r",
									"});\r",
									"\r",
									"pm.test(\"OBJECT_TYPE is PAYLOAD\", function () {\r",
									"    pm.expect(targetObject.spaceTrack.OBJECT_TYPE).to.equal(\"PAYLOAD\");\r",
									"});\r",
									"\r",
									"pm.test(\"RCS_SIZE is LARGE\", function () {\r",
									"    pm.expect(targetObject.spaceTrack.RCS_SIZE).to.equal(\"LARGE\");\r",
									"});\r",
									"\r",
									"pm.test(\"COUNTRY_CODE is US\", function () {\r",
									"    pm.expect(targetObject.spaceTrack.COUNTRY_CODE).to.equal(\"US\");\r",
									"});\r",
									"\r",
									"pm.test(\"LAUNCH_DATE has expected value\", function () {\r",
									"    pm.expect(targetObject.spaceTrack.LAUNCH_DATE).to.equal(\"2021-09-14\");\r",
									"});\r",
									"\r",
									"pm.test(\"DECAY_DATE is null\", function () {\r",
									"    pm.expect(targetObject.spaceTrack.DECAY_DATE).to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"DECAYED is 0\", function () {\r",
									"    pm.expect(targetObject.spaceTrack.DECAYED).to.equal(0);\r",
									"});\r",
									"\r",
									"pm.test(\"FILE has expected value\", function () {\r",
									"    pm.expect(targetObject.spaceTrack.FILE).to.equal(3675646);\r",
									"});\r",
									"\r",
									"pm.test(\"GP_ID has expected value\", function () {\r",
									"    pm.expect(targetObject.spaceTrack.GP_ID).to.equal(219174015);\r",
									"});\r",
									"\r",
									"pm.test(\"TLE_LINE0 has expected value\", function () {\r",
									"    pm.expect(targetObject.spaceTrack.TLE_LINE0).to.equal(\"0 STARLINK-3085\");\r",
									"});\r",
									"\r",
									"pm.test(\"TLE_LINE1 has expected value\", function () {\r",
									"    pm.expect(targetObject.spaceTrack.TLE_LINE1).to.equal(\"1 49156U 21082AC  22334.40615386  .00000464  00000-0  46667-4 0  9992\");\r",
									"});\r",
									"\r",
									"pm.test(\"TLE_LINE2 has expected value\", function () {\r",
									"    pm.expect(targetObject.spaceTrack.TLE_LINE2).to.equal(\"2 49156  70.0015  28.1842 0003239 276.8404  83.2387 14.98326548 69009\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"height_km has expected value\", function () {\r",
									"    pm.expect(targetObject.height_km).to.equal(583.1992985297693);\r",
									"});\r",
									"\r",
									"pm.test(\"latitude has expected value\", function () {\r",
									"    pm.expect(targetObject.latitude).to.equal(-35.10065497210143);\r",
									"});\r",
									"\r",
									"pm.test(\"longitude has expected value\", function () {\r",
									"    pm.expect(targetObject.longitude).to.equal(39.17356802565406);\r",
									"});\r",
									"\r",
									"pm.test(\"velocity_kms has expected value\", function () {\r",
									"    pm.expect(targetObject.velocity_kms).to.equal(7.568627047798202);\r",
									"});\r",
									"\r",
									"\r",
									"//      Headers\r",
									"// Checking number oп headers\r",
									"pm.test(\"Response headers count is correct\", function () {\r",
									"    let expectedHeadersCount = 28; \r",
									"    let actualHeadersCount = pm.response.headers.count(); // get number of headers\r",
									"    console.log(\"Expected headers:\", expectedHeadersCount);\r",
									"    console.log(\"Actual headers:\", actualHeadersCount);\r",
									"    pm.expect(actualHeadersCount).to.eql(expectedHeadersCount);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Transfer-Encoding is present\", function () {\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. access-control-allow-origin is present\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-origin\", \"*\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. access-control-expose-headers is present\", function () {\r",
									"    pm.response.to.have.header(\"access-control-expose-headers\", \"spacex-api-cache,spacex-api-response-time\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. alt-svc is present\", function () {\r",
									"    pm.response.to.have.header(\"alt-svc\", 'h3=\":443\"; ma=86400');\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Cache-Control is present\", function () {\r",
									"    pm.response.to.have.header(\"Cache-Control\", 'max-age=3600');\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Content-Encoding is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Encoding\", 'gzip');\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. content-security-policy is present\", function () {\r",
									"    pm.response.to.have.header(\"content-security-policy\", \"default-src 'self';base-uri 'self';block-all-mixed-content;font-src 'self' https: data:;frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. etag is present\", function () {\r",
									"    pm.response.to.have.header(\"etag\", '\"464026-jptKWyL15fdqjfw10GJchixB/eI\"');\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. expect-ct is present\", function () {\r",
									"    pm.response.to.have.header(\"expect-ct\", 'max-age=0');\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. referrer-policy is present\", function () {\r",
									"    pm.response.to.have.header(\"referrer-policy\", 'no-referrer');\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. spacex-api-cache is present\", function () {\r",
									"    pm.response.to.have.header(\"spacex-api-cache\", 'HIT');\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. spacex-api-cache-online is present\", function () {\r",
									"    pm.response.to.have.header(\"spacex-api-cache-online\", \"true\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. spacex-api-response-time is present and below 20s\", function () {\r",
									"    let responseTimeHeader = pm.response.headers.get(\"spacex-api-response-time\");\r",
									"    pm.expect(responseTimeHeader).to.not.be.null;\r",
									"    let responseTime = parseInt(responseTimeHeader.replace(\"ms\", \"\"), 10);\r",
									"    pm.expect(responseTime).to.be.a(\"number\");\r",
									"    pm.expect(responseTime).to.be.below(20000, \"Response time should be under 20 seconds\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. strict-transport-security is present\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\", \"max-age=15552000; includeSubDomains\");\r",
									"});\r",
									"\r",
									"pm.test(\"Header vary's are present\", function () {\r",
									"    let varyHeader = pm.response.headers.get(\"vary\");\r",
									"    pm.expect(varyHeader).to.not.be.null;\r",
									"    let varyValues = varyHeader.split(',').map(val => val.trim());\r",
									"    pm.expect(varyValues).to.include(\"Accept-Encoding\");\r",
									"    if (varyValues.includes(\"Origin\")) {\r",
									"        pm.expect(varyValues).to.include(\"Origin\");\r",
									"    } else {\r",
									"        console.warn(\"Warning: 'Origin' is not present in Vary header\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. x-content-type-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\", \"nosniff\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. x-dns-prefetch-control is present\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\", \"off\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. x-download-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\", \"noopen\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. x-frame-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\", \"SAMEORIGIN\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. x-permitted-cross-domain-policies is present\", function () {\r",
									"    pm.response.to.have.header(\"x-permitted-cross-domain-policies\", \"none\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. x-xss-protection is present\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\", \"0\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. cf-cache-status is present\", function () {\r",
									"    pm.response.to.have.header(\"cf-cache-status\", \"DYNAMIC\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Headers. Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\", \"cloudflare\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. CF-RAY is present\", function () {\r",
									"    pm.response.to.have.header(\"CF-RAY\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}",
							"host": [
								"{{URL}}"
							]
						},
						"description": "Getting all Starlink Sats. Seting all environment varvariables (see scripts)"
					},
					"response": []
				},
				{
					"name": "Get one Starlink sat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"pm.test(\"Response should be okay to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 600ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 2500 000 B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(2500);\r",
									"});\r",
									"\r",
									"pm.test(\"spaceTrack is an object and contains expected fields\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"spaceTrack\");\r",
									"    pm.expect(jsonData.spaceTrack).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Making sure we got correct Starlink (Starlink-30)\r",
									"pm.test(\"Environment ID matches the ID in the response body\", function () {\r",
									"    pm.expect(pm.environment.get(\"id\")).to.equal(pm.response.json().id);\r",
									"});\r",
									"\r",
									"pm.test(\"Object name is STARLINK-3085\", function () {\r",
									"    pm.expect(pm.response.json().spaceTrack.OBJECT_NAME).to.equal(\"STARLINK-3085\");\r",
									"});\r",
									"\r",
									"pm.test(\"CCSDS_OMM_VERS is 2.0\", function () {\r",
									"    pm.expect(pm.response.json().spaceTrack.CCSDS_OMM_VERS).to.equal(\"2.0\");\r",
									"});\r",
									"\r",
									"pm.test(\"COMMENT has expected value\", function () {\r",
									"    pm.expect(pm.response.json().spaceTrack.COMMENT).to.equal(\"GENERATED VIA SPACE-TRACK.ORG API\");\r",
									"});\r",
									"\r",
									"pm.test(\"CREATION_DATE is correct\", function () {\r",
									"    pm.expect(pm.response.json().spaceTrack.CREATION_DATE).to.equal(\"2022-11-30T17:18:05\");\r",
									"});\r",
									"\r",
									"pm.test(\"ORIGINATOR is 18 SPCS\", function () {\r",
									"    pm.expect(pm.response.json().spaceTrack.ORIGINATOR).to.equal(\"18 SPCS\");\r",
									"});\r",
									"\r",
									"pm.test(\"OBJECT_NAME is STARLINK-3085\", function () {\r",
									"    pm.expect(pm.response.json().spaceTrack.OBJECT_NAME).to.equal(\"STARLINK-3085\");\r",
									"});\r",
									"\r",
									"pm.test(\"OBJECT_ID is 2021-082AC\", function () {\r",
									"    pm.expect(pm.response.json().spaceTrack.OBJECT_ID).to.equal(\"2021-082AC\");\r",
									"});\r",
									"\r",
									"pm.test(\"CENTER_NAME is EARTH\", function () {\r",
									"    pm.expect(pm.response.json().spaceTrack.CENTER_NAME).to.equal(\"EARTH\");\r",
									"});\r",
									"\r",
									"pm.test(\"REF_FRAME is TEME\", function () {\r",
									"    pm.expect(pm.response.json().spaceTrack.REF_FRAME).to.equal(\"TEME\");\r",
									"});\r",
									"\r",
									"pm.test(\"TIME_SYSTEM is UTC\", function () {\r",
									"    pm.expect(pm.response.json().spaceTrack.TIME_SYSTEM).to.equal(\"UTC\");\r",
									"});\r",
									"\r",
									"pm.test(\"MEAN_ELEMENT_THEORY is SGP4\", function () {\r",
									"    pm.expect(pm.response.json().spaceTrack.MEAN_ELEMENT_THEORY).to.equal(\"SGP4\");\r",
									"});\r",
									"\r",
									"pm.test(\"EPOCH has expected value\", function () {\r",
									"    pm.expect(pm.response.json().spaceTrack.EPOCH).to.equal(\"2022-11-30T09:44:51.693504\");\r",
									"});\r",
									"\r",
									"pm.test(\"MEAN_MOTION has expected value\", function () {\r",
									"    pm.expect(pm.response.json().spaceTrack.MEAN_MOTION).to.equal(14.98326548);\r",
									"});\r",
									"\r",
									"pm.test(\"ECCENTRICITY has expected value\", function () {\r",
									"    pm.expect(pm.response.json().spaceTrack.ECCENTRICITY).to.equal(0.0003239);\r",
									"});\r",
									"\r",
									"pm.test(\"INCLINATION has expected value\", function () {\r",
									"    pm.expect(pm.response.json().spaceTrack.INCLINATION).to.equal(70.0015);\r",
									"});\r",
									"\r",
									"pm.test(\"RA_OF_ASC_NODE has expected value\", function () {\r",
									"    pm.expect(pm.response.json().spaceTrack.RA_OF_ASC_NODE).to.equal(28.1842);\r",
									"});\r",
									"\r",
									"pm.test(\"ARG_OF_PERICENTER has expected value\", function () {\r",
									"    pm.expect(pm.response.json().spaceTrack.ARG_OF_PERICENTER).to.equal(276.8404);\r",
									"});\r",
									"\r",
									"pm.test(\"MEAN_ANOMALY has expected value\", function () {\r",
									"    pm.expect(pm.response.json().spaceTrack.MEAN_ANOMALY).to.equal(83.2387);\r",
									"});\r",
									"\r",
									"pm.test(\"REV_AT_EPOCH has expected value\", function () {\r",
									"    pm.expect(pm.response.json().spaceTrack.REV_AT_EPOCH).to.equal(6900);\r",
									"});\r",
									"\r",
									"pm.test(\"BSTAR has expected value\", function () {\r",
									"    pm.expect(pm.response.json().spaceTrack.BSTAR).to.equal(0.000046667);\r",
									"});\r",
									"\r",
									"pm.test(\"MEAN_MOTION_DOT has expected value\", function () {\r",
									"    pm.expect(pm.response.json().spaceTrack.MEAN_MOTION_DOT).to.equal(0.00000464);\r",
									"});\r",
									"\r",
									"pm.test(\"MEAN_MOTION_DDOT is 0\", function () {\r",
									"    pm.expect(pm.response.json().spaceTrack.MEAN_MOTION_DDOT).to.equal(0);\r",
									"});\r",
									"\r",
									"pm.test(\"SEMIMAJOR_AXIS has expected value\", function () {\r",
									"    pm.expect(pm.response.json().spaceTrack.SEMIMAJOR_AXIS).to.equal(6950.204);\r",
									"});\r",
									"\r",
									"pm.test(\"PERIOD has expected value\", function () {\r",
									"    pm.expect(pm.response.json().spaceTrack.PERIOD).to.equal(96.107);\r",
									"});\r",
									"\r",
									"pm.test(\"APOAPSIS has expected value\", function () {\r",
									"    pm.expect(pm.response.json().spaceTrack.APOAPSIS).to.equal(574.32);\r",
									"});\r",
									"\r",
									"pm.test(\"PERIAPSIS has expected value\", function () {\r",
									"    pm.expect(pm.response.json().spaceTrack.PERIAPSIS).to.equal(569.817);\r",
									"});\r",
									"\r",
									"pm.test(\"OBJECT_TYPE is PAYLOAD\", function () {\r",
									"    pm.expect(pm.response.json().spaceTrack.OBJECT_TYPE).to.equal(\"PAYLOAD\");\r",
									"});\r",
									"\r",
									"pm.test(\"RCS_SIZE is LARGE\", function () {\r",
									"    pm.expect(pm.response.json().spaceTrack.RCS_SIZE).to.equal(\"LARGE\");\r",
									"});\r",
									"\r",
									"pm.test(\"COUNTRY_CODE is US\", function () {\r",
									"    pm.expect(pm.response.json().spaceTrack.COUNTRY_CODE).to.equal(\"US\");\r",
									"});\r",
									"\r",
									"pm.test(\"LAUNCH_DATE has expected value\", function () {\r",
									"    pm.expect(pm.response.json().spaceTrack.LAUNCH_DATE).to.equal(\"2021-09-14\");\r",
									"});\r",
									"\r",
									"pm.test(\"SITE has expected value\", function () {\r",
									"    pm.expect(pm.response.json().spaceTrack.SITE).to.equal(\"AFWTR\");\r",
									"});\r",
									"\r",
									"pm.test(\"DECAY_DATE is null\", function () {\r",
									"    pm.expect(pm.response.json().spaceTrack.DECAY_DATE).to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"DECAYED is 0\", function () {\r",
									"    pm.expect(pm.response.json().spaceTrack.DECAYED).to.equal(0);\r",
									"});\r",
									"\r",
									"pm.test(\"FILE has expected value\", function () {\r",
									"    pm.expect(pm.response.json().spaceTrack.FILE).to.equal(3675646);\r",
									"});\r",
									"\r",
									"pm.test(\"GP_ID has expected value\", function () {\r",
									"    pm.expect(pm.response.json().spaceTrack.GP_ID).to.equal(219174015);\r",
									"});\r",
									"\r",
									"pm.test(\"TLE_LINE0 has expected value\", function () {\r",
									"    pm.expect(pm.response.json().spaceTrack.TLE_LINE0).to.equal(\"0 STARLINK-3085\");\r",
									"});\r",
									"\r",
									"pm.test(\"TLE_LINE1 has expected value\", function () {\r",
									"    pm.expect(pm.response.json().spaceTrack.TLE_LINE1).to.equal(\"1 49156U 21082AC  22334.40615386  .00000464  00000-0  46667-4 0  9992\");\r",
									"});\r",
									"\r",
									"pm.test(\"TLE_LINE2 has expected value\", function () {\r",
									"    pm.expect(pm.response.json().spaceTrack.TLE_LINE2).to.equal(\"2 49156  70.0015  28.1842 0003239 276.8404  83.2387 14.98326548 69009\");\r",
									"});\r",
									"\r",
									"pm.test(\"height_km has expected value\", function () {\r",
									"    pm.expect(pm.response.json().height_km).to.equal(583.1992985297693);\r",
									"});\r",
									"\r",
									"pm.test(\"latitude has expected value\", function () {\r",
									"    pm.expect(pm.response.json().latitude).to.equal(-35.10065497210143);\r",
									"});\r",
									"\r",
									"pm.test(\"longitude has expected value\", function () {\r",
									"    pm.expect(pm.response.json().longitude).to.equal(39.17356802565406);\r",
									"});\r",
									"\r",
									"pm.test(\"velocity_kms has expected value\", function () {\r",
									"    pm.expect(pm.response.json().velocity_kms).to.equal(7.568627047798202);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/{{id}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"{{id}}"
							]
						},
						"description": "Using id of specific Starling"
					},
					"response": []
				},
				{
					"name": "Get a random Starlink sat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be okay to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 600ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 2500 000 B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(2500);\r",
									"});\r",
									"\r",
									"// Check body\r",
									"pm.test(\"spaceTrack is an object and contains expected fields\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"spaceTrack\");\r",
									"    pm.expect(jsonData.spaceTrack).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"spaceTrack has all expected keys\", function () {\r",
									"    const expectedKeys = [\r",
									"        \"CCSDS_OMM_VERS\", \"COMMENT\", \"CREATION_DATE\", \"ORIGINATOR\", \"OBJECT_NAME\",\r",
									"        \"OBJECT_ID\", \"CENTER_NAME\", \"REF_FRAME\", \"TIME_SYSTEM\", \"MEAN_ELEMENT_THEORY\",\r",
									"        \"EPOCH\", \"MEAN_MOTION\", \"ECCENTRICITY\", \"INCLINATION\", \"RA_OF_ASC_NODE\",\r",
									"        \"ARG_OF_PERICENTER\", \"MEAN_ANOMALY\", \"EPHEMERIS_TYPE\", \"CLASSIFICATION_TYPE\",\r",
									"        \"NORAD_CAT_ID\", \"ELEMENT_SET_NO\", \"REV_AT_EPOCH\", \"BSTAR\", \"MEAN_MOTION_DOT\",\r",
									"        \"MEAN_MOTION_DDOT\", \"SEMIMAJOR_AXIS\", \"PERIOD\", \"APOAPSIS\", \"PERIAPSIS\",\r",
									"        \"OBJECT_TYPE\", \"RCS_SIZE\", \"COUNTRY_CODE\", \"LAUNCH_DATE\", \"SITE\", \"DECAY_DATE\",\r",
									"        \"DECAYED\", \"FILE\", \"GP_ID\", \"TLE_LINE0\", \"TLE_LINE1\", \"TLE_LINE2\"\r",
									"    ];\r",
									"\r",
									"    const actualKeys = Object.keys(pm.response.json().spaceTrack);\r",
									"    expectedKeys.forEach(function(key) {\r",
									"        pm.expect(actualKeys).to.include(key);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"EPOCH is a valid ISO date string\", function () {\r",
									"    const epoch = pm.response.json().spaceTrack.EPOCH;\r",
									"    const isoDateRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/;\r",
									"    pm.expect(epoch).to.match(isoDateRegex);\r",
									"});\r",
									"\r",
									"pm.test(\"Top-level fields are present\", function () {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"height_km\");\r",
									"    pm.expect(json).to.have.property(\"latitude\");\r",
									"    pm.expect(json).to.have.property(\"velocity_kms\");\r",
									"\r",
									"    pm.expect(json.height_km).to.be.a(\"number\");\r",
									"    pm.expect(json.latitude).to.be.within(-90, 90);\r",
									"    pm.expect(json.longitude).to.be.within(-180, 180);\r",
									"});\r",
									"\r",
									"//      Headers\r",
									"// Checking number oп headers\r",
									"pm.test(\"Response headers count is correct\", function () {\r",
									"    let expectedHeadersCount = 31; \r",
									"    let actualHeadersCount = pm.response.headers.count(); // get number of headers\r",
									"    console.log(\"Expected headers:\", expectedHeadersCount);\r",
									"    console.log(\"Actual headers:\", actualHeadersCount);\r",
									"    pm.expect(actualHeadersCount).to.eql(expectedHeadersCount);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Connection is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. access-control-allow-origin is present\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-origin\", \"*\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. access-control-expose-headers is present\", function () {\r",
									"    pm.response.to.have.header(\"access-control-expose-headers\", \"spacex-api-cache,spacex-api-response-time\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. alt-svc is present\", function () {\r",
									"    pm.response.to.have.header(\"alt-svc\", 'h3=\":443\"; ma=86400');\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Cache-Control is present\", function () {\r",
									"    pm.response.to.have.header(\"Cache-Control\", 'max-age=3600');\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Content-Encoding is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Encoding\", 'gzip');\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. content-security-policy is present\", function () {\r",
									"    pm.response.to.have.header(\"content-security-policy\", \"default-src 'self';base-uri 'self';block-all-mixed-content;font-src 'self' https: data:;frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. expect-ct is present\", function () {\r",
									"    pm.response.to.have.header(\"expect-ct\", 'max-age=0');\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. referrer-policy is present\", function () {\r",
									"    pm.response.to.have.header(\"referrer-policy\", 'no-referrer');\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. spacex-api-cache is present\", function () {\r",
									"    pm.response.to.have.header(\"spacex-api-cache\", 'HIT');\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. spacex-api-cache-online is present\", function () {\r",
									"    pm.response.to.have.header(\"spacex-api-cache-online\", \"true\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. spacex-api-response-time is present and below 20s\", function () {\r",
									"    let responseTimeHeader = pm.response.headers.get(\"spacex-api-response-time\");\r",
									"    pm.expect(responseTimeHeader).to.not.be.null;\r",
									"    let responseTime = parseInt(responseTimeHeader.replace(\"ms\", \"\"), 10);\r",
									"    pm.expect(responseTime).to.be.a(\"number\");\r",
									"    pm.expect(responseTime).to.be.below(20000, \"Response time should be under 20 seconds\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. strict-transport-security is present\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\", \"max-age=15552000; includeSubDomains\");\r",
									"});\r",
									"\r",
									"pm.test(\"Header vary's are present\", function () {\r",
									"    let varyHeader = pm.response.headers.get(\"vary\");\r",
									"    pm.expect(varyHeader).to.not.be.null;\r",
									"    let varyValues = varyHeader.split(',').map(val => val.trim());\r",
									"    pm.expect(varyValues).to.include(\"Accept-Encoding\");\r",
									"    if (varyValues.includes(\"Origin\")) {\r",
									"        pm.expect(varyValues).to.include(\"Origin\");\r",
									"    } else {\r",
									"        console.warn(\"Warning: 'Origin' is not present in Vary header\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. x-content-type-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\", \"nosniff\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. x-dns-prefetch-control is present\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\", \"off\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. x-download-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\", \"noopen\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. x-frame-options is present\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\", \"SAMEORIGIN\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. x-permitted-cross-domain-policies is present\", function () {\r",
									"    pm.response.to.have.header(\"x-permitted-cross-domain-policies\", \"none\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. x-xss-protection is present\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\", \"0\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. cf-cache-status is present\", function () {\r",
									"    pm.response.to.have.header(\"cf-cache-status\", \"DYNAMIC\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Report-To is present\", function () {\r",
									"    pm.response.to.have.header(\"Report-To\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. NEL is present\", function () {\r",
									"    pm.response.to.have.header(\"NEL\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Server is present\", function () {\r",
									"    pm.response.to.have.header(\"Server\", \"cloudflare\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. CF-RAY is present\", function () {\r",
									"    pm.response.to.have.header(\"CF-RAY\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. server-timing is present\", function () {\r",
									"    pm.response.to.have.header(\"server-timing\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/{{Random_id}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"{{Random_id}}"
							]
						},
						"description": "Using random id"
					},
					"response": []
				},
				{
					"name": "Query for specific version Starlink sats",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type is text/plain; charset=utf-8\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql(\"text/plain; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length is 41\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Length')).to.eql(\"41\");\r",
									"});\r",
									"\r",
									"pm.test(\"Date header is present\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"date\")).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is 'text/plain; charset=utf-8'\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"content-type\")).to.eql(\"text/plain; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length is '41'\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"content-length\")).to.eql(\"41\");\r",
									"});\r",
									"\r",
									"pm.test(\"Connection is 'keep-alive'\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.eql(\"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"cf-cache-status is 'DYNAMIC'\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"cf-cache-status\")).to.eql(\"DYNAMIC\");\r",
									"});\r",
									"\r",
									"pm.test(\"Report-To header is present\", function () {\r",
									"    const reportTo = pm.response.headers.get(\"report-to\");\r",
									"    pm.expect(reportTo).to.not.be.undefined;\r",
									"    pm.expect(() => JSON.parse(reportTo)).to.not.throw(); \r",
									"});\r",
									"\r",
									"pm.test(\"NEL header is present\", function () {\r",
									"    const nel = pm.response.headers.get(\"nel\");\r",
									"    pm.expect(nel).to.not.be.undefined;\r",
									"    pm.expect(() => JSON.parse(nel)).to.not.throw();\r",
									"});\r",
									"\r",
									"pm.test(\"Server is 'cloudflare'\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"server\")).to.eql(\"cloudflare\");\r",
									"});\r",
									"\r",
									"pm.test(\"CF-RAY header is present\", function () {\r",
									"    const cfRay = pm.response.headers.get(\"cf-ray\");\r",
									"    pm.expect(cfRay).to.not.be.undefined;\r",
									"    pm.expect(cfRay.length).to.be.above(0); \r",
									"});\r",
									"\r",
									"pm.test(\"server-timing header is present\", function () {\r",
									"    const timing = pm.response.headers.get(\"server-timing\");\r",
									"    pm.expect(timing).to.not.be.undefined;\r",
									"    pm.expect(timing.length).to.be.above(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"query\": {\r\n    \"version\": {{Version}}\r\n  },\r\n  \"options\": {}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/query",
							"host": [
								"{{URL}}"
							],
							"path": [
								"query"
							]
						},
						"description": "selecting only prototype version of Starlink"
					},
					"response": []
				}
			]
		},
		{
			"name": "NegativeTesta",
			"item": [
				{
					"name": "Get all Starlink sat using URL without starlink",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check statuse code\r",
									"if(responseCode.code === 200) {\r",
									"    tests[\"Fail. Backend is available, response code is 200! Expected result: 404!\"] = false;\r",
									"} else if (responseCode.code === 401) {\r",
									"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
									"} else if (responseCode.code === 403) {\r",
									"    tests[\"Forbiden\"] = false;\r",
									"} else if (responseCode.code === 404) {\r",
									"    tests[\"Pass. Not Found. Expected result: 404. \"] = true;\r",
									"} else if (responseCode.code === 422) {\r",
									"    tests[\"The instance is not valid\"] = false;\r",
									"} else {\r",
									"    tests[\"Something went wrong. Check response body\"] = false;\r",
									"}\r",
									"\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1500 000 B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(1500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains 'Not Found'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body is exactly 'Not Found'\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql(\"Not Found\");\r",
									"});\r",
									"\r",
									"// Headers\r",
									"pm.test(\"Headers. Date is present\", function () {\r",
									"    pm.response.to.have.header(\"date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Content-Type is correct\", function () {\r",
									"    pm.response.to.have.header(\"content-type\", \"text/plain; charset=utf-8\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Headers. Connection is 'keep-alive'\", function () {\r",
									"    pm.response.to.have.header(\"connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Access-Control-Allow-Origin is '*'\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-origin\", \"*\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Access-Control-Expose-Headers is correct\", function () {\r",
									"    pm.response.to.have.header(\"access-control-expose-headers\", \"spacex-api-cache,spacex-api-response-time\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Alt-Svc is correct\", function () {\r",
									"    pm.response.to.have.header(\"alt-svc\", 'h3=\":443\"; ma=86400');\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Content-Security-Policy is present\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"content-security-policy\")).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Expect-Ct is 'max-age=0'\", function () {\r",
									"    pm.response.to.have.header(\"expect-ct\", \"max-age=0\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Referrer-Policy is 'no-referrer'\", function () {\r",
									"    pm.response.to.have.header(\"referrer-policy\", \"no-referrer\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Server is 'cloudflare'\", function () {\r",
									"    pm.response.to.have.header(\"server\", \"cloudflare\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Spacex-Api-Response-Time is '0ms'\", function () {\r",
									"    pm.response.to.have.header(\"spacex-api-response-time\", \"0ms\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Strict-Transport-Security is correct\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\", \"max-age=15552000; includeSubDomains\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Vary is 'Origin'\", function () {\r",
									"    pm.response.to.have.header(\"vary\", \"Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. X-Content-Type-Options is 'nosniff'\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\", \"nosniff\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. X-Dns-Prefetch-Control is 'off'\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\", \"off\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. X-Download-Options is 'noopen'\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\", \"noopen\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. X-Frame-Options is 'SAMEORIGIN'\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\", \"SAMEORIGIN\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. X-Permitted-Cross-Domain-Policies is 'none'\", function () {\r",
									"    pm.response.to.have.header(\"x-permitted-cross-domain-policies\", \"none\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. X-Xss-Protection is '0'\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\", \"0\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Cf-Cache-Status is 'DYNAMIC'\", function () {\r",
									"    pm.response.to.have.header(\"cf-cache-status\", \"DYNAMIC\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Headers. CF-RAY is present\", function () {\r",
									"    const ray = pm.response.headers.get(\"cf-ray\");\r",
									"    pm.expect(ray).to.not.be.undefined;\r",
									"    pm.expect(ray.length).to.be.above(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL_without_starlink}}",
							"host": [
								"{{URL_without_starlink}}"
							]
						},
						"description": "Using incomplete URL (missing word \"starlink\""
					},
					"response": []
				},
				{
					"name": "Get Starlink with not existing id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomHexId(length = 24) {\r",
									"    let hex = '';\r",
									"    const chars = 'abcdef0123456789';\r",
									"    for (let i = 0; i < length; i++) {\r",
									"        hex += chars[Math.floor(Math.random() * chars.length)];\r",
									"    }\r",
									"    return hex;\r",
									"}\r",
									"\r",
									"const randomId = generateRandomHexId();\r",
									"pm.environment.set(\"NotExisting_id\", randomId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check statuse code\r",
									"if(responseCode.code === 200) {\r",
									"    tests[\"Fail. Backend is available, response code is 200! Expected result: 404!\"] = false;\r",
									"} else if (responseCode.code === 401) {\r",
									"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
									"} else if (responseCode.code === 403) {\r",
									"    tests[\"Forbiden\"] = false;\r",
									"} else if (responseCode.code === 404) {\r",
									"    tests[\"Pass. Not Found. Expected result: 404. \"] = true;\r",
									"} else if (responseCode.code === 422) {\r",
									"    tests[\"The instance is not valid\"] = false;\r",
									"} else {\r",
									"    tests[\"Something went wrong. Check response body\"] = false;\r",
									"}\r",
									"\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1500 000 B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(1500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains 'Not Found'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body is exactly 'Not Found'\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql(\"Not Found\");\r",
									"});\r",
									"\r",
									"// Headers\r",
									"pm.test(\"Headers. Date is present\", function () {\r",
									"    pm.response.to.have.header(\"date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Content-Type is correct\", function () {\r",
									"    pm.response.to.have.header(\"content-type\", \"text/plain; charset=utf-8\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Headers. Connection is 'keep-alive'\", function () {\r",
									"    pm.response.to.have.header(\"connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Access-Control-Allow-Origin is '*'\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-origin\", \"*\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Access-Control-Expose-Headers is correct\", function () {\r",
									"    pm.response.to.have.header(\"access-control-expose-headers\", \"spacex-api-cache,spacex-api-response-time\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Alt-Svc is correct\", function () {\r",
									"    pm.response.to.have.header(\"alt-svc\", 'h3=\":443\"; ma=86400');\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Content-Security-Policy is present\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"content-security-policy\")).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Expect-Ct is 'max-age=0'\", function () {\r",
									"    pm.response.to.have.header(\"expect-ct\", \"max-age=0\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Referrer-Policy is 'no-referrer'\", function () {\r",
									"    pm.response.to.have.header(\"referrer-policy\", \"no-referrer\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Server is 'cloudflare'\", function () {\r",
									"    pm.response.to.have.header(\"server\", \"cloudflare\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Strict-Transport-Security is correct\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\", \"max-age=15552000; includeSubDomains\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Vary is 'Origin'\", function () {\r",
									"    pm.response.to.have.header(\"vary\", \"Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. X-Content-Type-Options is 'nosniff'\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\", \"nosniff\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. X-Dns-Prefetch-Control is 'off'\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\", \"off\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. X-Download-Options is 'noopen'\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\", \"noopen\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. X-Frame-Options is 'SAMEORIGIN'\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\", \"SAMEORIGIN\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. X-Permitted-Cross-Domain-Policies is 'none'\", function () {\r",
									"    pm.response.to.have.header(\"x-permitted-cross-domain-policies\", \"none\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. X-Xss-Protection is '0'\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\", \"0\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Cf-Cache-Status is 'DYNAMIC'\", function () {\r",
									"    pm.response.to.have.header(\"cf-cache-status\", \"DYNAMIC\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Headers. CF-RAY is present\", function () {\r",
									"    const ray = pm.response.headers.get(\"cf-ray\");\r",
									"    pm.expect(ray).to.not.be.undefined;\r",
									"    pm.expect(ray.length).to.be.above(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/{{NotExisting_id}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"{{NotExisting_id}}"
							]
						},
						"description": "Trying get info using non exising id"
					},
					"response": []
				},
				{
					"name": "Create new Starlink sat",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const names = [\"Maria\", \"Athena\", \"Zeus\", \"Apollo\", \"Luna\", \"Mars\"];\r",
									"const name = names[Math.floor(Math.random() * names.length)];\r",
									"const objectName = `STARLINK-${name}`;\r",
									"\r",
									"const centers = [\"MARS\", \"EARTH\", \"MOON\", \"VENUS\"];\r",
									"const center = centers[Math.floor(Math.random() * centers.length)];\r",
									"\r",
									"const originators = [\"50 SPCS\", \"NASA\", \"ESA\", \"ROSCOSMOS\"];\r",
									"const originator = originators[Math.floor(Math.random() * originators.length)];\r",
									"\r",
									"pm.environment.set(\"OBJECT_NAME\", objectName);\r",
									"pm.environment.set(\"CENTER_NAME\", center);\r",
									"pm.environment.set(\"ORIGINATOR\", originator);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check statuse code\r",
									"if(responseCode.code === 200) {\r",
									"    tests[\"Fail. Backend is available, response code is 200! Expected result: 404!\"] = false;\r",
									"} else if (responseCode.code === 401) {\r",
									"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
									"} else if (responseCode.code === 403) {\r",
									"    tests[\"Forbiden\"] = false;\r",
									"} else if (responseCode.code === 404) {\r",
									"    tests[\"Pass. Not Found. Expected result: 404. \"] = true;\r",
									"} else if (responseCode.code === 422) {\r",
									"    tests[\"The instance is not valid\"] = false;\r",
									"} else {\r",
									"    tests[\"Something went wrong. Check response body\"] = false;\r",
									"}\r",
									"\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1500 000 B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(1500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains YouTube link\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"https://youtu.be/RfiQYRn7fBg\");\r",
									"});\r",
									"\r",
									"// Headers\r",
									"pm.test(\"Headers. Date is present\", function () {\r",
									"    pm.response.to.have.header(\"date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Content-Type is correct\", function () {\r",
									"    pm.response.to.have.header(\"content-type\", \"text/plain; charset=utf-8\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Headers. Connection is 'keep-alive'\", function () {\r",
									"    pm.response.to.have.header(\"connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Access-Control-Allow-Origin is '*'\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-origin\", \"*\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Access-Control-Expose-Headers is correct\", function () {\r",
									"    pm.response.to.have.header(\"access-control-expose-headers\", \"spacex-api-cache,spacex-api-response-time\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Alt-Svc is correct\", function () {\r",
									"    pm.response.to.have.header(\"alt-svc\", 'h3=\":443\"; ma=86400');\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Content-Security-Policy is present\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"content-security-policy\")).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Expect-Ct is 'max-age=0'\", function () {\r",
									"    pm.response.to.have.header(\"expect-ct\", \"max-age=0\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Referrer-Policy is 'no-referrer'\", function () {\r",
									"    pm.response.to.have.header(\"referrer-policy\", \"no-referrer\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Server is 'cloudflare'\", function () {\r",
									"    pm.response.to.have.header(\"server\", \"cloudflare\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Spacex-Api-Response-Time is '0ms'\", function () {\r",
									"    pm.response.to.have.header(\"spacex-api-response-time\", \"0ms\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Strict-Transport-Security is correct\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\", \"max-age=15552000; includeSubDomains\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Vary is 'Origin'\", function () {\r",
									"    pm.response.to.have.header(\"vary\", \"Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. X-Content-Type-Options is 'nosniff'\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\", \"nosniff\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. X-Dns-Prefetch-Control is 'off'\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\", \"off\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. X-Download-Options is 'noopen'\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\", \"noopen\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. X-Frame-Options is 'SAMEORIGIN'\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\", \"SAMEORIGIN\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. X-Permitted-Cross-Domain-Policies is 'none'\", function () {\r",
									"    pm.response.to.have.header(\"x-permitted-cross-domain-policies\", \"none\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. X-Xss-Protection is '0'\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\", \"0\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Cf-Cache-Status is 'DYNAMIC'\", function () {\r",
									"    pm.response.to.have.header(\"cf-cache-status\", \"DYNAMIC\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Headers. CF-RAY is present\", function () {\r",
									"    const ray = pm.response.headers.get(\"cf-ray\");\r",
									"    pm.expect(ray).to.not.be.undefined;\r",
									"    pm.expect(ray.length).to.be.above(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "spacex-key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"OBJECT_NAME\": \"{{OBJECT_NAME}}\",\r\n    \"CENTER_NAME\": \"{{CENTER_NAME}}\",\r\n    \"ORIGINATOR\": \"{{ORIGINATOR}}\",\r\n    \"id\": \"{{NotExisting_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}",
							"host": [
								"{{URL}}"
							]
						},
						"description": "trying to create new Starlink-Maria"
					},
					"response": []
				},
				{
					"name": "Update Starlink sat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check statuse code\r",
									"if(responseCode.code === 200) {\r",
									"    tests[\"Fail. Backend is available, response code is 200! Expected result: 404!\"] = false;\r",
									"} else if (responseCode.code === 401) {\r",
									"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
									"} else if (responseCode.code === 403) {\r",
									"    tests[\"Forbiden\"] = false;\r",
									"} else if (responseCode.code === 404) {\r",
									"    tests[\"Pass. Not Found. Expected result: 404. \"] = true;\r",
									"} else if (responseCode.code === 422) {\r",
									"    tests[\"The instance is not valid\"] = false;\r",
									"} else {\r",
									"    tests[\"Something went wrong. Check response body\"] = false;\r",
									"}\r",
									"\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1500 000 B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(1500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains YouTube link\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"https://youtu.be/RfiQYRn7fBg\");\r",
									"});\r",
									"\r",
									"// Headers\r",
									"pm.test(\"Headers. Date is present\", function () {\r",
									"    pm.response.to.have.header(\"date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Content-Type is correct\", function () {\r",
									"    pm.response.to.have.header(\"content-type\", \"text/plain; charset=utf-8\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Headers. Connection is 'keep-alive'\", function () {\r",
									"    pm.response.to.have.header(\"connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Access-Control-Allow-Origin is '*'\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-origin\", \"*\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Access-Control-Expose-Headers is correct\", function () {\r",
									"    pm.response.to.have.header(\"access-control-expose-headers\", \"spacex-api-cache,spacex-api-response-time\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Alt-Svc is correct\", function () {\r",
									"    pm.response.to.have.header(\"alt-svc\", 'h3=\":443\"; ma=86400');\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Content-Security-Policy is present\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"content-security-policy\")).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Expect-Ct is 'max-age=0'\", function () {\r",
									"    pm.response.to.have.header(\"expect-ct\", \"max-age=0\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Referrer-Policy is 'no-referrer'\", function () {\r",
									"    pm.response.to.have.header(\"referrer-policy\", \"no-referrer\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Server is 'cloudflare'\", function () {\r",
									"    pm.response.to.have.header(\"server\", \"cloudflare\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Spacex-Api-Response-Time is '0ms'\", function () {\r",
									"    pm.response.to.have.header(\"spacex-api-response-time\", \"0ms\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Strict-Transport-Security is correct\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\", \"max-age=15552000; includeSubDomains\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Vary is 'Origin'\", function () {\r",
									"    pm.response.to.have.header(\"vary\", \"Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. X-Content-Type-Options is 'nosniff'\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\", \"nosniff\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. X-Dns-Prefetch-Control is 'off'\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\", \"off\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. X-Download-Options is 'noopen'\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\", \"noopen\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. X-Frame-Options is 'SAMEORIGIN'\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\", \"SAMEORIGIN\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. X-Permitted-Cross-Domain-Policies is 'none'\", function () {\r",
									"    pm.response.to.have.header(\"x-permitted-cross-domain-policies\", \"none\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. X-Xss-Protection is '0'\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\", \"0\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Cf-Cache-Status is 'DYNAMIC'\", function () {\r",
									"    pm.response.to.have.header(\"cf-cache-status\", \"DYNAMIC\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Headers. CF-RAY is present\", function () {\r",
									"    const ray = pm.response.headers.get(\"cf-ray\");\r",
									"    pm.expect(ray).to.not.be.undefined;\r",
									"    pm.expect(ray.length).to.be.above(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "spacex-key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{URL}}/{{NotExisting_id}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"{{NotExisting_id}}"
							]
						},
						"description": "Trying to patch with non existing id"
					},
					"response": []
				},
				{
					"name": "Delete Starlink sat",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomHexId(length = 24) {\r",
									"    let hex = '';\r",
									"    const chars = 'abcdef0123456789';\r",
									"    for (let i = 0; i < length; i++) {\r",
									"        hex += chars[Math.floor(Math.random() * chars.length)];\r",
									"    }\r",
									"    return hex;\r",
									"}\r",
									"\r",
									"const randomId = generateRandomHexId();\r",
									"pm.environment.set(\"NotExisting_id\", randomId);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check statuse code\r",
									"if(responseCode.code === 200) {\r",
									"    tests[\"Fail. Backend is available, response code is 200! Expected result: 404!\"] = false;\r",
									"} else if (responseCode.code === 401) {\r",
									"    tests[\"Not authorised, check access token or Log in\"] = false;\r",
									"} else if (responseCode.code === 403) {\r",
									"    tests[\"Forbiden\"] = false;\r",
									"} else if (responseCode.code === 404) {\r",
									"    tests[\"Pass. Not Found. Expected result: 404. \"] = true;\r",
									"} else if (responseCode.code === 422) {\r",
									"    tests[\"The instance is not valid\"] = false;\r",
									"} else {\r",
									"    tests[\"Something went wrong. Check response body\"] = false;\r",
									"}\r",
									"\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1500 000 B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(1500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains YouTube link\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"https://youtu.be/RfiQYRn7fBg\");\r",
									"});\r",
									"\r",
									"// Headers\r",
									"pm.test(\"Headers. Date is present\", function () {\r",
									"    pm.response.to.have.header(\"date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Content-Type is 'text/plain; charset=utf-8'\", function () {\r",
									"    pm.response.to.have.header(\"content-type\", \"text/plain; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Content-Length is '28'\", function () {\r",
									"    pm.response.to.have.header(\"content-length\", \"28\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Connection is 'keep-alive'\", function () {\r",
									"    pm.response.to.have.header(\"connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Access-Control-Allow-Origin is '*'\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-origin\", \"*\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Access-Control-Expose-Headers is correct\", function () {\r",
									"    pm.response.to.have.header(\"access-control-expose-headers\", \"spacex-api-cache,spacex-api-response-time\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Alt-Svc is correct\", function () {\r",
									"    pm.response.to.have.header(\"alt-svc\", 'h3=\":443\"; ma=86400');\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Content-Security-Policy is present\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"content-security-policy\")).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Expect-Ct is 'max-age=0'\", function () {\r",
									"    pm.response.to.have.header(\"expect-ct\", \"max-age=0\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Referrer-Policy is 'no-referrer'\", function () {\r",
									"    pm.response.to.have.header(\"referrer-policy\", \"no-referrer\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Server is 'cloudflare'\", function () {\r",
									"    pm.response.to.have.header(\"server\", \"cloudflare\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Spacex-Api-Response-Time is '0ms'\", function () {\r",
									"    pm.response.to.have.header(\"spacex-api-response-time\", \"0ms\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Strict-Transport-Security is correct\", function () {\r",
									"    pm.response.to.have.header(\"strict-transport-security\", \"max-age=15552000; includeSubDomains\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Vary is 'Origin'\", function () {\r",
									"    pm.response.to.have.header(\"vary\", \"Origin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. X-Content-Type-Options is 'nosniff'\", function () {\r",
									"    pm.response.to.have.header(\"x-content-type-options\", \"nosniff\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. X-Dns-Prefetch-Control is 'off'\", function () {\r",
									"    pm.response.to.have.header(\"x-dns-prefetch-control\", \"off\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. X-Download-Options is 'noopen'\", function () {\r",
									"    pm.response.to.have.header(\"x-download-options\", \"noopen\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. X-Frame-Options is 'SAMEORIGIN'\", function () {\r",
									"    pm.response.to.have.header(\"x-frame-options\", \"SAMEORIGIN\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. X-Permitted-Cross-Domain-Policies is 'none'\", function () {\r",
									"    pm.response.to.have.header(\"x-permitted-cross-domain-policies\", \"none\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. X-Xss-Protection is '0'\", function () {\r",
									"    pm.response.to.have.header(\"x-xss-protection\", \"0\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. Cf-Cache-Status is 'DYNAMIC'\", function () {\r",
									"    pm.response.to.have.header(\"cf-cache-status\", \"DYNAMIC\");\r",
									"});\r",
									"\r",
									"pm.test(\"Headers. CF-RAY is present\", function () {\r",
									"    const cfRay = pm.response.headers.get(\"cf-ray\");\r",
									"    pm.expect(cfRay).to.not.be.undefined;\r",
									"    pm.expect(cfRay.length).to.be.above(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "spacex-key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/{{NotExisting_id}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"{{NotExisting_id}}"
							]
						},
						"description": "deleting with non existing id"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id_list",
			"value": "",
			"type": "string"
		}
	]
}